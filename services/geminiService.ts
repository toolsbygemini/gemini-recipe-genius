
import { GoogleGenAI, Type, Modality } from "@google/genai";
import { Recipe } from '../types';

if (!process.env.API_KEY) {
    throw new Error("API_KEY environment variable not set");
}

const ai = new GoogleGenAI({ apiKey: process.env.API_KEY });

const recipeSchema = {
  type: Type.OBJECT,
  properties: {
    recipeName: {
      type: Type.STRING,
      description: "The name of the recipe.",
    },
    description: {
      type: Type.STRING,
      description: "A short, enticing description of the dish.",
    },
    ingredients: {
      type: Type.ARRAY,
      items: {
        type: Type.STRING,
      },
      description: "A list of all ingredients required for the recipe.",
    },
    instructions: {
      type: Type.ARRAY,
      items: {
        type: Type.STRING,
      },
      description: "Step-by-step instructions on how to prepare the dish.",
    },
    cookingTime: {
        type: Type.STRING,
        description: "Estimated total cooking time, e.g., 'Approx. 45 minutes'.",
    },
    chefTips: {
        type: Type.ARRAY,
        items: {
            type: Type.STRING,
        },
        description: "A list of 2-3 helpful tips, variations, or serving suggestions for the recipe."
    }
  },
  required: ["recipeName", "description", "ingredients", "instructions", "cookingTime", "chefTips"],
};

export const generateRecipe = async (
  ingredients: string,
  imageBase64?: string,
  imageMimeType?: string
): Promise<Recipe> => {
  const textPrompt = `You are a creative chef. Based on the following ingredients (from text and/or an image), create a delicious and easy-to-follow recipe. The user has provided: ${ingredients || 'no text input'}. Analyze the image if provided. Please provide a recipe with a name, a short description, a list of all necessary ingredients (including the ones provided and any staples like oil, salt, pepper), clear, step-by-step instructions, the estimated cooking time, and a couple of helpful chef's tips.`;

  const contents = [];
  if (imageBase64 && imageMimeType) {
    contents.push({
      inlineData: {
        data: imageBase64,
        mimeType: imageMimeType,
      }
    });
  }
  contents.push({ text: textPrompt });

  try {
    const response = await ai.models.generateContent({
      model: "gemini-2.5-flash",
      contents: { parts: contents },
      config: {
        responseMimeType: "application/json",
        responseSchema: recipeSchema,
      },
    });

    const jsonText = response.text.trim();
    const recipeData = JSON.parse(jsonText);
    
    // Basic validation
    if (
      !recipeData.recipeName || 
      !recipeData.description || 
      !Array.isArray(recipeData.ingredients) || 
      !Array.isArray(recipeData.instructions) ||
      !recipeData.cookingTime ||
      !Array.isArray(recipeData.chefTips)
    ) {
      throw new Error("Invalid recipe format received from API.");
    }

    return recipeData as Recipe;
  } catch (error) {
    console.error("Error generating recipe:", error);
    throw new Error("Could not generate a recipe from the provided ingredients.");
  }
};


export const generateRecipeImage = async (recipeName: string, description: string): Promise<string> => {
    const prompt = `A delicious, high-quality, photorealistic image of "${recipeName}". A professionally styled and plated dish. ${description}`;

    try {
        const response = await ai.models.generateContent({
            model: 'gemini-2.5-flash-image-preview',
            contents: {
                parts: [{ text: prompt }],
            },
            config: {
                responseModalities: [Modality.IMAGE, Modality.TEXT],
            },
        });

        let imageUrl = '';
        if (response.candidates && response.candidates.length > 0) {
            for (const part of response.candidates[0].content.parts) {
                if (part.inlineData) {
                    const base64ImageBytes: string = part.inlineData.data;
                    imageUrl = `data:${part.inlineData.mimeType};base64,${base64ImageBytes}`;
                    break; 
                }
            }
        }
        
        if (imageUrl) {
            return imageUrl;
        } else {
            console.error("Model response did not contain an image.", response);
            throw new Error("No image was generated by the model.");
        }
    } catch (error) {
        console.error("Error generating image:", error);
        throw new Error("Could not generate an image for the recipe.");
    }
};
